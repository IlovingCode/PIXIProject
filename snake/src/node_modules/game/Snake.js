import { Point, Sprite, Circle } from 'pixi.js';
import * as input from 'engine/input';

export class Head {
    init(pos) {
        this.sprite = this.createSprite("head");
        this.sprite.scale.set(0.4, 0.4);
        this.direction = new Point;
        this.child = new Body(this);
        this.text = document.getElementById("Score");
        this.reset(pos);
    }

    onRotate() {
        const angle = this.sprite.rotation - Math.PI / 2;
        this.direction.x = Math.cos(angle);
        this.direction.y = Math.sin(angle);
    }

    addChild() {
        this.speed *= 1.05;
        this.delta *= 1.05;

        for (let i = 0; i < 5; i++) {
            const currentChild = this.child;
            this.child = new Body(this);

            this.child.child = currentChild;
            currentChild.parent = this.child;

            if (i == 0){
                this.child.sprite = this.createSprite("body");
                this.child.sprite.scale.set(0.5, 0.5);
                this.child.sprite.position.copy(this.position);
            }
        }

        this.score++;
        this.text.innerHTML = this.score.toString();
    }

    reset(pos) {
        this.child.destroy(this);

        this.position = new Point(pos.x, pos.y);
        this.sprite.position.copy(pos);
        this.sprite.rotation = 0;
        this.speed = 70;
        this.delta = Math.PI * 0.7;
        this.turnLeft = false;
        this.score = -1;
        this.onRotate();
        this.addChild();
        this.addChild();
    }

    update(dt) {
        this.child.update(dt);

        /*if (input.buttonDown("KeyA")) {
            this.sprite.rotation -= this.delta;
            this.onRotate();
        }

        if (input.buttonDown("KeyD")) {
            this.sprite.rotation += this.delta;
            this.onRotate();
        }

        if (input.buttonReleased("Space")) {
            this.addChild();
            //this.turnLeft = !this.turnLeft;
        }*/

        if (this.turnLeft) {
            this.sprite.rotation -= this.delta * dt;
        } else {
            this.sprite.rotation += this.delta * dt;
        }

        this.onRotate();

        this.position.set(
            this.position.x + this.direction.x * this.speed * dt,
            this.position.y + this.direction.y * this.speed * dt
        );

        this.sprite.position.copy(this.position);
    }
}

export class Body {
    constructor(parent) {
        this.parent = parent;
        this.child = null;
        this.position = new Point;
    }

    destroy(head) {
        this.child && this.child.destroy(head);

        this.sprite && head.deleteSprite(this.sprite);
        this.sprite = null;
        this.child = null;
    }

    update(dt) {
        this.child && this.child.update(dt);
        this.position.copy(this.parent.position);
        this.sprite && this.sprite.position.copy(this.position);
    }
}

export class Food {
    constructor(sprite, getPos, snake) {
        this.sprite = sprite;
        this.getPos = getPos;
        this.getPos(this.sprite.position);
        this.sprite.scale.set(0.2, 0.2);
        this.snake = snake;
        this.distance = new Point;
        this.threshold = sprite.width / 2 + snake.sprite.width / 2;
        this.threshold *= this.threshold;
    }

    update(dt) {
        this.distance.set(
            this.snake.position.x - this.sprite.position.x,
            this.snake.position.y - this.sprite.position.y
        );

        if (this.distance.x * this.distance.x + this.distance.y * this.distance.y < this.threshold) {
            //this.snake.deleteSprite(this.sprite);
            this.getPos(this.sprite.position);
            this.snake.addChild();
        }
    }
}