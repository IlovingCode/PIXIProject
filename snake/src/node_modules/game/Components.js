export class MoveComponent {
    constructor(target) {
        this.position = target.position;
        this.v = target.v;
        this.a = target.a;
    }

    update(dt) {
        if (this.v.x != 0) {
            this.v.x += this.a.x * dt;
            this.position.x += this.v.x * dt;
        }

        if (this.v.y != 0) {
            this.v.y += this.a.y * dt;
            this.position.y += this.v.y * dt;
        }
    }
}

export class SnakeController {
    constructor(target) {
        this.target = target;
        this.delta = 0;
        this.speed = 0;
        this.turnLeft = false;
    }

    scale(scale) {
        this.delta *= scale;
        this.speed *= scale;
    }

    update(dt) {
        if (this.turnLeft) {
            this.target.rotation -= this.delta * dt;
        } else {
            this.target.rotation += this.delta * dt;
        }

        const angle = this.target.rotation - Math.PI / 2;
        this.target.v.set(Math.cos(angle) * this.speed, Math.sin(angle) * this.speed);
    }
}

export class AutoComponent {
    constructor(target) {
        this.target = target.sprite;
        this.control = target.control;
        this.rotation = 0;
        this.delta = Math.PI / 3;
    }

    update(dt) {
        if (this.time > 0)
            this.time -= dt;
        else {
            this.time = 4;
            this.rotation += Math.PI / 2;
        }

        if (this.control.turnLeft) {
            if (this.target.rotation < this.rotation - this.delta)
                this.control.turnLeft = false;
        } else {
            if (this.target.rotation > this.rotation + this.delta)
                this.control.turnLeft = true;
        }
    }
}

export class ScoreComponent {
    constructor() {
        this.text = document.getElementById("Score");
        this.setScore(0);
    }

    setScore(score) {
        this.score = score;
        this.text.innerHTML = score.toString();
    }
}