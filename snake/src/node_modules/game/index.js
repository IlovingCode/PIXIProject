import 'game/style.css'; // webpack magic
//import {FBInstant} from 'mock/fbinstant.6.0.mock.js'
import { Point, SCALE_MODES, settings, Sprite, Rectangle } from 'pixi.js';
settings.SCALE_MODE = SCALE_MODES.LINEAR;

import * as engine from 'engine';
import * as display from 'engine/display';
import Scene from 'engine/Scene';
import { Head, Food, FakeHead } from 'game/Snake';

class TestScene extends Scene {
  init() {
    this.backgroundColor = 0xEEEEEE;

    const ele = document.getElementById("Root");
    ele.style.width = display.width;
    ele.style.height = display.height;

    const center = new Point(display.width / 2, display.height / 2);
    const topLeft = new Point(display.width * 0.1, display.height * 0.1);

    this.character = new Head(center, this.stage);
    this.fake = new FakeHead(new Point(display.width * 0.25, display.height * 0.25), this.stage);

    this.bound = new Rectangle(0, 0, display.width, display.height);

    this.foods = [];
    const randomBound = new Rectangle(topLeft.x, topLeft.y, display.width * 0.8, display.height * 0.8);
    const getRandomPos = (pos) => {
      pos.set(randomBound.x + Math.random() * randomBound.width,
        randomBound.y + Math.random() * randomBound.height);
    };
    for (let i = 0; i < 3; i++) {
      this.foods.push(new Food(this.stage, getRandomPos, this.character));
    }
    this.fake.auto.setPath(this.foods);
  }

  endGame() {
    if (USE_FB_INSTANT) {
      const score = this.character.score;
      window.postScore(score);
    }

    //const center = new Point(display.width / 2, display.height / 2);
    //this.character.reset(center);
    scene = new TestScene;
    return scene;
  }

  update(dt) {
    this.character.update(dt);
    this.fake.update(dt);

    this.foods.forEach(function(element) {
      element.update(dt);
    });

    if (!this.bound.contains(
      this.character.sprite.position.x,
      this.character.sprite.position.y)) {
      return this.endGame();
    }

    if (!this.bound.contains(
      this.fake.sprite.position.x,
      this.fake.sprite.position.y)) {
      if (!this.fake.isLocked) {
        this.fake.auto.updateDest();
        this.fake.isLocked = true;
      }
    } else {
      this.fake.isLocked = false;
    }

    if (this.fake.checkHit(this.character.sprite)) {
      return this.endGame();
    }
  }
}

const USE_FB_INSTANT = false;
let scene = new TestScene;

window.addEventListener('touchstart', function() {
  // the user touched the screen!
  scene.character.control.turnLeft = !scene.character.control.turnLeft;
});

window.startGame = function() {
  const parentElement = document.getElementById("Root");
  engine.launch(scene, { parentElement });
};

window.postScore = function(score) {
  let leaderboardIns = null;
  window.FBInstant.getLeaderboardAsync('Happy Worm.' + window.FBInstant.context.getID())
    .then((leaderboard) => {
      leaderboardIns = leaderboard;
      leaderboard.getPlayerEntryAsync();
    })
    .then((entry) => {
      const bestscore = entry.getScore();
      if (score > bestscore)
        leaderboardIns.setScoreAsync(score)
          .then(() => {
            window.FBInstant.updateAsync({
              action: 'LEADERBOARD',
              name: 'Happy Worm.' + window.FBInstant.context.getID(),
            });
          });
    });


};

window.onload = function() {
  if (USE_FB_INSTANT) {
    window.FBInstant.initializeAsync()
      .then(function() {
        // Start loading game assets here
        window.FBInstant.startGameAsync()
          .then(function() {
            window.startGame();
          });
      });
  } else {
    window.startGame();
  }
};