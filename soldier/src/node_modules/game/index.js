import 'game/style.css'; // webpack magic
//import {FBInstant} from 'mock/fbinstant.6.0.mock.js'
import { Point, SCALE_MODES, settings, Rectangle } from 'pixi.js';
settings.SCALE_MODE = SCALE_MODES.LINEAR;

import * as engine from 'engine';
import * as display from 'engine/display';
import Scene from 'engine/Scene';
import { Soldier } from 'game/Soldier';
import { Map } from 'game/Map';

class TestScene extends Scene {
  init() {
    this.backgroundColor = 0xEEEEEE;

    const ele = document.getElementById("Root");
    ele.style.width = display.width;
    ele.style.height = display.height;

    const delta = 100;
    this.bound = new Rectangle(-delta, -delta, 
      display.width + delta * 2, display.height + delta * 2);

    const center = new Point(display.width * 0.3, display.height * 0.8);
    this.character = new Soldier(center, this.stage);

    this.bullet = this.character.comp[3].pool;
    this.map = new Map(display.width, display.height);
    this.enemy = this.map.spawnEnemy(this.stage);

    this.score = 0;
    this.text = document.getElementById("Score");
    this.text.innerHTML = "0";
  }

  update(dt) {
    if (!this.character.sprite.onGround) {
      dt *= 0.2;
    }

    this.character.update(dt);

    for (let i = this.enemy.length - 1; i >= 0; i--) {
      const e = this.enemy[i];
      e.update(dt);

      if (!this.bound.contains(e.sprite.position.x, e.sprite.position.y)) {
        this.stage.removeChild(e.sprite);
        e.sprite = null;
        this.enemy.splice(i, 1);
      }
    }

    for (let i = this.bullet.length - 1; i >= 0; i--) {
      const sprite = this.bullet[i].sprite;

      if (!this.bound.contains(sprite.position.x, sprite.position.y)) {
        this.stage.removeChild(sprite);
        this.bullet[i].sprite = null;
        this.bullet.splice(i, 1);
      }

      for (let j = this.enemy.length - 1; j >= 0; j--) {
        const e = this.enemy[j];
        const r = (e.sprite.width + sprite.width) * 0.5;
        const x = e.sprite.position.x - sprite.position.x;
        const y = e.sprite.position.y - sprite.position.y;

        if (x * x + y * y < r * r) {
          this.score++;
          this.text.innerHTML = this.score.toString();

          this.stage.removeChild(e.sprite);
          e.sprite = null;
          this.enemy.splice(j, 1);
        }
      }
    }
  }
}

const USE_FB_INSTANT = false;
const scene = new TestScene;

window.addEventListener('touchstart', function() {
  // the user touched the screen!
});

window.startGame = function() {
  const parentElement = document.getElementById("Root");
  engine.launch(scene, { parentElement });
};

window.postScore = function(score) {
  window.FBInstant.getLeaderboardAsync('Happy Worm.' + window.FBInstant.context.getID())
    .then((leaderboard) => {
      return leaderboard.setScoreAsync(score);
    })
    .then(() => {
      window.FBInstant.updateAsync({
        action: 'LEADERBOARD',
        name: 'Happy Worm.' + window.FBInstant.context.getID(),
      });
    });
};

window.onload = function() {
  if (USE_FB_INSTANT) {
    window.FBInstant.initializeAsync()
      .then(function() {
        // Start loading game assets here
        window.FBInstant.startGameAsync()
          .then(function() {
            window.startGame();
          });
      });
  } else {
    window.startGame();
  }
};