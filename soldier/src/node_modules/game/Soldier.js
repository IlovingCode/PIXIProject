import { Point } from 'pixi.js';
import * as input from 'engine/input';

export class Soldier {
    constructor(sprite, pos) {
        this.sprite = sprite;
        this.sprite.scale.set(0.5, 0.5);
        this.sprite.position.copy(pos);
        this.sprite.v = new Point;
        this.sprite.a = new Point;

        this.comp = [];
        //this.comp.push(new JumpComponent(this.sprite));
        this.comp.push(new RollComponent(this.sprite));
        //this.comp.push(new MoveComponent(this.sprite));
    }

    update(dt) {
        this.comp.forEach(function(element) {
            element.update(dt);
        });

        if (input.buttonPressed("Space")) {
            this.comp.forEach(function(element) {
                element.start();
            });
        }
    }
}

export class JumpComponent {
    constructor(target) {
        this.position = target.position;
        this.y0 = this.position.y;
        this.v = target.v;
        this.a = target.a;
    }

    start() {
        if (this.position.y < this.y0)
            return;

        this.v.y = -200;
        this.a.y = Math.abs(this.v.y) * 1.5;
    }

    update(dt) {
        if (this.v.y == 0)
            return;

        this.v.y += this.a.y * dt;
        this.position.y += this.v.y * dt;

        if (this.position.y > this.y0) {
            this.v.y = 0;
            this.position.y = this.y0;
        }
    }
}

export class MoveComponent {
    constructor(target) {
        this.position = target.position;
        this.y0 = this.position.y;
        this.v = target.v;
        this.a = target.a;
    }

    start() {
        if (this.position.y < this.y0)
            return;

        this.v.x = 200;
        this.a.x = - this.v.x * 1.5;
        this.x0 = this.v.x;
    }

    update(dt) {
        if (this.v.x == 0)
            return;

        this.v.x += this.a.x * dt;

        if (this.v.x * this.x0 < 0)
            this.v.x = 0;

        this.position.x += this.v.x * dt;
    }
}

export class ForceComponent {
    constructor(target) {
        this.target = target;
        this.v = target.v;
        this.a = target.a;
    }

    start() {
        if (this.target.rotation == 0)
            return;

        this.v.y -= 200 * Math.sin(this.target.rotation + Math.PI / 2);
        this.v.x += 50 * Math.cos(this.target.rotation + Math.PI / 2);

        this.a.y = Math.abs(this.v.y) * 1.5;
        this.a.x = - this.v.x * 1.5;
    }

    update(dt) {
    }
}

export class RollComponent {
    constructor(target) {
        this.target = target;
        this.rot0 = this.target.rotation;
        this.v = 0;
    }

    start() {
        this.v = -this.v;
    }

    update(dt) {
        if (this.v == 0)
            return;

        this.target.rotation += this.v * dt; 
    }
}